"use strict";(self.webpackChunkhcihub_docs=self.webpackChunkhcihub_docs||[]).push([[2573],{8453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>r});var a=s(6540);const t={},i=a.createContext(t);function l(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),a.createElement(i.Provider,{value:e},n.children)}},9345:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>l,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"datasets/non-invasive/Calcium Imaging","title":"7_Calcium Imaging","description":"Dataset Link","source":"@site/docs/datasets/non-invasive/7_Calcium Imaging.md","sourceDirName":"datasets/non-invasive","slug":"/datasets/non-invasive/Calcium Imaging","permalink":"/BCIJelly-site/docs/next/datasets/non-invasive/Calcium Imaging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/datasets/non-invasive/7_Calcium Imaging.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6_Things EEG","permalink":"/BCIJelly-site/docs/next/datasets/non-invasive/Things EEG"},"next":{"title":"CCA","permalink":"/BCIJelly-site/docs/next/models/CCA"}}');var t=s(4848),i=s(8453);const l={},r="7_Calcium Imaging",d={},m=[{value:"Dataset Link",id:"dataset-link",level:2},{value:"1. Data Acquisition",id:"1-data-acquisition",level:3},{value:"2. Data Preprocessing Workflow",id:"2-data-preprocessing-workflow",level:3}];function c(n){const e={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mfrac:"mfrac",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",msup:"msup",mtext:"mtext",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"7_calcium-imaging",children:"7_Calcium Imaging"})}),"\n",(0,t.jsx)(e.h2,{id:"dataset-link",children:"Dataset Link"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://zenodo.org/doi/10.5281/zenodo.10408334",children:"https://zenodo.org/doi/10.5281/zenodo.10408334"})}),"\n",(0,t.jsx)(e.h3,{id:"1-data-acquisition",children:"1. Data Acquisition"}),"\n",(0,t.jsx)(e.p,{children:"Method: Wide-field calcium imaging was used to record fluorescent signals from the mouse cortex, while simultaneously recording behavioral activity.\nSubjects: 5 mice.\nExperimental paradigm: Neural activity and behavioral performance were recorded synchronously to analyze the relationship between cortical dynamics and behavior."}),"\n",(0,t.jsx)(e.h3,{id:"2-data-preprocessing-workflow",children:"2. Data Preprocessing Workflow"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Read experimental configuration information"}),"\n",(0,t.jsxs)(e.p,{children:["Read the mapping between ",(0,t.jsx)(e.code,{children:"Data_ID"})," and corresponding mouse number (",(0,t.jsx)(e.code,{children:"Mouse_#"}),") from ",(0,t.jsx)(e.code,{children:"data_64_5mice.csv"})," for subsequent output file naming.\nRead behavioral labels (run/rest segments for each mouse) from ",(0,t.jsx)(e.code,{children:"runrest_5mice.mat"}),".\nObtain the list of ",(0,t.jsx)(e.code,{children:".tif"})," filenames corresponding to each mouse number, with each ",(0,t.jsx)(e.code,{children:"Data_ID"})," representing one imaging experiment."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Image loading and preprocessing"}),"\n",(0,t.jsxs)(e.p,{children:["Use ",(0,t.jsx)(e.code,{children:"tifffile"})," to read ",(0,t.jsx)(e.code,{children:".tif"})," wide-field calcium imaging data, ensuring the data shape is ",(0,t.jsx)(e.code,{children:"[T, C, H, W]"})," (number of time frames T, number of channels C, spatial resolution H\xd7W).\nFind the label sequence that best matches the number of image frames (allowing \xb15 frame tolerance) and truncate sequences that are too long."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Loading mean / standard deviation"}),"\n",(0,t.jsxs)(e.p,{children:["Load the per-pixel mean and standard deviation matrices for each ",(0,t.jsx)(e.code,{children:"Data_ID"})," from the precomputed ",(0,t.jsx)(e.code,{children:"_mean.npy"})," and ",(0,t.jsx)(e.code,{children:"_std.npy"})," files for normalization."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Frame-wise normalization"}),"\n",(0,t.jsx)(e.p,{children:"Perform per-pixel normalization for each frame:"}),"\n",(0,t.jsx)(e.span,{className:"katex-display",children:(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsxs)(e.msub,{children:[(0,t.jsx)(e.mrow,{}),(0,t.jsx)(e.mtext,{children:"norm"})]}),(0,t.jsx)(e.mo,{children:"="}),(0,t.jsxs)(e.mfrac,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"x"}),(0,t.jsx)(e.mo,{children:"\u2212"}),(0,t.jsx)(e.mtext,{children:"mean"})]}),(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mtext,{children:"std"}),(0,t.jsx)(e.mo,{children:"+"}),(0,t.jsx)(e.mn,{children:"1"}),(0,t.jsx)(e.mo,{children:"\xd7"}),(0,t.jsxs)(e.msup,{children:[(0,t.jsx)(e.mn,{children:"10"}),(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mo,{children:"\u2212"}),(0,t.jsx)(e.mn,{children:"5"})]})]})]})]})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"_{\\text{norm}} = \\frac{x - \\text{mean}}{\\text{std} + 1\\times 10^{-5}}"})]})})}),(0,t.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.5169em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{}),(0,t.jsx)(e.span,{className:"msupsub",children:(0,t.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(e.span,{className:"vlist-r",children:[(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(e.span,{style:{top:"-2.55em",marginRight:"0.05em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:(0,t.jsx)(e.span,{className:"mord text mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:"norm"})})})})]})}),(0,t.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(e.span,{})})})]})})]}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(e.span,{className:"mrel",children:"="}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"2.0297em",verticalAlign:"-0.7693em"}}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mopen nulldelimiter"}),(0,t.jsx)(e.span,{className:"mfrac",children:(0,t.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(e.span,{className:"vlist-r",children:[(0,t.jsxs)(e.span,{className:"vlist",style:{height:"1.2603em"},children:[(0,t.jsxs)(e.span,{style:{top:"-2.314em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord text",children:(0,t.jsx)(e.span,{className:"mord",children:"std"})}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mbin",children:"+"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mord",children:"1"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mord",children:"1"}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord",children:"0"}),(0,t.jsx)(e.span,{className:"msupsub",children:(0,t.jsx)(e.span,{className:"vlist-t",children:(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.7401em"},children:(0,t.jsxs)(e.span,{style:{top:"-2.989em",marginRight:"0.05em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(e.span,{className:"mord mtight",children:[(0,t.jsx)(e.span,{className:"mord mtight",children:"\u2212"}),(0,t.jsx)(e.span,{className:"mord mtight",children:"5"})]})})]})})})})})]})]})]}),(0,t.jsxs)(e.span,{style:{top:"-3.23em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(e.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,t.jsxs)(e.span,{style:{top:"-3.677em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord mathnormal",children:"x"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mord text",children:(0,t.jsx)(e.span,{className:"mord",children:"mean"})})]})]})]}),(0,t.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.7693em"},children:(0,t.jsx)(e.span,{})})})]})}),(0,t.jsx)(e.span,{className:"mclose nulldelimiter"})]})]})]})]})}),"\n",(0,t.jsxs)(e.p,{children:["Keep the channel dimension ",(0,t.jsx)(e.code,{children:"[C, H, W]"}),"; if ",(0,t.jsx)(e.code,{children:"flatten=True"}),", flatten each frame and take the mean across channels to obtain a ",(0,t.jsx)(e.code,{children:"[C]"})," feature vector."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Sequence windowing"}),"\n",(0,t.jsxs)(e.p,{children:["Set the time window length to ",(0,t.jsx)(e.code,{children:"T=30"}),"; use consecutive 30 frames as one sample, sliding to generate all possible window sequences.\nThe label of each window is determined by majority voting among labels in the window (",(0,t.jsx)(e.code,{children:"np.bincount().argmax()"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Naming rules and saving"}),"\n",(0,t.jsx)(e.p,{children:"The output file naming format is:"}),"\n",(0,t.jsx)(e.p,{children:"YYYYMMDD_Mouse#.npz"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Inside each .npz file:"}),"\n",(0,t.jsx)(e.p,{children:"calcium \u2192 windowed image features"}),"\n",(0,t.jsx)(e.p,{children:"label \u2192 corresponding window labels"}),"\n",(0,t.jsx)(e.p,{children:"If the file already exists, _v2, _v3, etc., will be appended to the filename to prevent overwriting.\nAll .npz files are saved in the datasets/10408334/data/npz_data/ directory."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('datasets/10408334/data_64_5mice.csv')\ndf\n"})}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{style:{textAlign:"right"}}),(0,t.jsx)(e.th,{children:"Data_ID"}),(0,t.jsx)(e.th,{children:"Mouse_#"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"0"}),(0,t.jsx)(e.td,{children:"20180125_Emx1G6_LR_1"}),(0,t.jsx)(e.td,{children:"1"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"1"}),(0,t.jsx)(e.td,{children:"20180125_Emx1G6_R_1"}),(0,t.jsx)(e.td,{children:"3"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"2"}),(0,t.jsx)(e.td,{children:"20180125_Emx1G6_non_1"}),(0,t.jsx)(e.td,{children:"2"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"3"}),(0,t.jsx)(e.td,{children:"20180126_Emx1G6_LR_1"}),(0,t.jsx)(e.td,{children:"1"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"4"}),(0,t.jsx)(e.td,{children:"20180126_Emx1G6_R_1"}),(0,t.jsx)(e.td,{children:"3"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:".."}),(0,t.jsx)(e.td,{children:"..."}),(0,t.jsx)(e.td,{children:"..."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"59"}),(0,t.jsx)(e.td,{children:"20180411_Emx1G6_non_1"}),(0,t.jsx)(e.td,{children:"5"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"60"}),(0,t.jsx)(e.td,{children:"20180412_Emx1G6_L_1"}),(0,t.jsx)(e.td,{children:"4"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"61"}),(0,t.jsx)(e.td,{children:"20180412_Emx1G6_non_1"}),(0,t.jsx)(e.td,{children:"5"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"62"}),(0,t.jsx)(e.td,{children:"20180413_Emx1G6_L_1"}),(0,t.jsx)(e.td,{children:"4"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{style:{textAlign:"right"},children:"63"}),(0,t.jsx)(e.td,{children:"20180413_Emx1G6_non_1"}),(0,t.jsx)(e.td,{children:"5"})]})]})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def get_filename(mouse_No):\n    filename = np.empty(0)\n    for i in mouse_No:\n        files = df[df['Mouse_#'] == i]['Data_ID'].values\n        filename = np.hstack([filename, files])\n    return filename\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import tifffile\nimport gc\n\ndef load_image(filename):\n    X_tmp = tifffile.imread(filename)\n    m = X_tmp.mean(axis=0)\n    s = X_tmp.std()\n    del X_tmp\n    gc.collect();\n    return m, s\n\nimage_path = 'datasets/10408334/'\nsave_path = 'datasets/10408334/data/mean_and_std/'\n\ndef calc_mean_std(mouse_num):\n    for i in get_filename([mouse_num]):\n        print(i)\n        m, s = load_image(image_path + i + '.tif')\n        print('Standard Deviation: {:.2f}'.format(s))\n        np.save(save_path + i + '_mean', m)\n        np.save(save_path + i + '_std', s)\n\nfor i in range(1,6):\n    print('Mouse No.'+str(i))\n    calc_mean_std(i)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Mouse No.1\n20180125_Emx1G6_LR_1\nStandard Deviation: 1087.01\n...\n20180213_Emx1G6_LR_1\nStandard Deviation: 975.20\nMouse No.2\n20180125_Emx1G6_non_1\nStandard Deviation: 1174.45\n...\n20180216_Emx1G6_non_1\nStandard Deviation: 1109.51\nMouse No.3\n20180125_Emx1G6_R_1\nStandard Deviation: 1146.73\n...\n20180216_Emx1G6_R_1\nStandard Deviation: 1093.76\nMouse No.4\n20180321_Emx1G6_L_1\nStandard Deviation: 1193.14\n...\n20180413_Emx1G6_L_1\nStandard Deviation: 1455.59\nMouse No.5\n20180321_Emx1G6_non_1\nStandard Deviation: 1166.09\n...\n20180413_Emx1G6_non_1\nStandard Deviation: 1471.06"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import numpy as np\nimport tifffile\nimport os\nimport gc\nimport pandas as pd\nfrom scipy.io import loadmat\nfrom collections import defaultdict\nfrom glob import glob\n\n\nimage_path = 'datasets/10408334/'\nbehavior_path = 'datasets/10408334/'\n\nmat_data = loadmat(os.path.join(behavior_path, 'runrest_5mice.mat'))\n\ndef get_filename(mouse_No):\n    filename = np.empty(0)\n    for i in mouse_No:\n        files = df[df['Mouse_#'] == i]['Data_ID'].values\n        filename = np.hstack([filename, files])\n    return filename\n\ndef load_image(path):\n    img = tifffile.imread(path) \n    if img.ndim == 3:\n        img = img[:, np.newaxis, :, :]\n    return img.astype(np.float32)\ndef get_framewise_labels(mat_entry):\n    segments = mat_entry[0]  \n    label_seq = [seg.flatten() for seg in segments]  \n    return np.concatenate(label_seq)\ndef find_matching_segment(mat_entry, T_img, tolerance=1):\n    for seg in mat_entry[0]:\n        y = seg.flatten()\n        if abs(len(y) - T_img) <= 5:\n            if len(y) < T_img:\n                y = np.pad(y, (0, T_img - len(y)))\n            else:\n                y = y[:T_img]\n            return y\n    raise ValueError(f\"Cannot find a label segment that matches the image frame count {T_img}.\")\n\nmean_dict = {}\nstd_dict = {}\nsave_path = 'datasets/10408334/data/mean_and_std/'\n\nfor i in df['Data_ID']:\n    m = np.load(save_path + i + '_mean.npy')\n    s = np.load(save_path + i + '_std.npy')\n    mean_dict[i] = m\n    std_dict[i] = s\n\ndef _unique_path(path):\n    if not os.path.exists(path):\n        return path\n    base, ext = os.path.splitext(path)\n    k = 2\n    while True:\n        cand = f\"{base}_v{k}{ext}\"\n        if not os.path.exists(cand):\n            return cand\n        k += 1\n\ndef build_NTC_direct_and_save(mouse_nums, csv_path, root_npz_dir, T=30, flatten=True):\n    os.makedirs(root_npz_dir, exist_ok=True)\n    df = pd.read_csv(csv_path)\n    id_to_mouse = dict(zip(df['Data_ID'], df['Mouse_#']))\n\n    for mouse_num in mouse_nums:\n        for fname in get_filename([mouse_num]): \n            print(f\"{fname}.tif\")\n            X = load_image(os.path.join(image_path, fname + '.tif')) \n            mat_entry = mat_data[f'runrest{mouse_num}']\n            Y = find_matching_segment(mat_entry, T_img)\n            assert len(X) == len(Y), f\"{fname}: Number of image frames {len(X)} != number of labels {len(Y)}\"\n\n            mean = mean_dict[fname]  # [H, W]\n            std  = std_dict[fname]   # [H, W]\n\n            X_list, Y_list = [], []\n            for j in range(len(Y)):\n                x = X[j][0]                       # [H, W]\n                y = int(Y[j])\n                x = (x - mean) / (std + 1e-5)\n                x = x[np.newaxis, :, :]          # [C, H, W]\n                if flatten:\n                    x = x.reshape(x.shape[0], -1).mean(axis=-1)  # [C]\n                X_list.append(x)\n                Y_list.append(y)\n\n            X_all = np.stack(X_list)              # [T_img, C] or [T_img, C, H, W]\n            Y_all = np.array(Y_list)              # [T_img]\n\n            del X_list, Y_list, X, Y\n            gc.collect()\n\n            if len(X_all) < T:\n                print(f\"\u8df3\u8fc7 {fname}, \u5e27\u6570 {len(X_all)} < T={T}\")\n                continue\n\n            N = len(X_all) - T + 1\n            X_windows = np.stack([X_all[i:i+T] for i in range(N)])                 # [N, T, ...]\n            Y_windows = np.array([np.bincount(Y_all[i:i+T]).argmax() for i in range(N)])  # [N]\n\n            date_part = fname[:8]\n            mouse_no  = id_to_mouse.get(fname, f\"M{mouse_num}\")\n            base = f\"{date_part}_{mouse_no}.npz\"\n            save_path = _unique_path(os.path.join(root_npz_dir, base))\n\n            np.savez(save_path, calcium=X_windows, label=Y_windows)\n\n            print(f\"{os.path.basename(save_path)} | calcium {X_windows.shape}, label {Y_windows.shape}\")\n\n\n# \u8c03\u7528\nbuild_NTC_direct_and_save(\n    mouse_nums=range(1, 6),\n    csv_path='datasets/10408334/data_64_5mice.csv',\n    root_npz_dir='datasets/10408334/data/npz_data',\n    T=30,\n    flatten=True\n)\n"})}),"\n",(0,t.jsx)(e.p,{children:"20180125_Emx1G6_LR_1.tif\n20180125_1.npz | calcium (17971, 30, 1), label (17971,)\n20180126_Emx1G6_LR_1.tif\n20180126_1.npz | calcium (17971, 30, 1), label (17971,)\n20180129_Emx1G6_LR_1.tif\n20180129_1.npz | calcium (17971, 30, 1), label (17971,)\n20180130_Emx1G6_LR_1.tif\n20180130_1.npz | calcium (17971, 30, 1), label (17971,)\n20180131_Emx1G6_LR_1.tif\n...\n20180405_5.npz | calcium (17971, 30, 1), label (17971,)\n20180406_Emx1G6_non_1.tif\n20180406_5.npz | calcium (17971, 30, 1), label (17971,)\n20180409_Emx1G6_non_1.tif\n20180409_5.npz | calcium (17971, 30, 1), label (17971,)\n20180411_Emx1G6_non_1.tif\n20180411_5.npz | calcium (17971, 30, 1), label (17971,)\n20180412_Emx1G6_non_1.tif\n20180412_5.npz | calcium (17971, 30, 1), label (17971,)\n20180413_Emx1G6_non_1.tif\n20180413_5.npz | calcium (17971, 30, 1), label (17971,)"})]})}function o(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}}}]);